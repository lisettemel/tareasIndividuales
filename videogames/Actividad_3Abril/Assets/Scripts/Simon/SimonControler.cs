/*
Manage the flow of the Simon game
Keep track of the turn, and the list of buttons to press

Lisette Melo 
A01028066
*/

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class SimonController : MonoBehaviour
{
    [SerializeField] List<SimonButton> buttons;
    [SerializeField] List<int> sequence;
    [SerializeField] float delay;
    [SerializeField] int level;
    [SerializeField] bool playerTurn = false;
    [SerializeField] int numButtons;
    [SerializeField] GameObject buttonPrefab;
    [SerializeField] Transform buttonParent;

    [SerializeField] int counter = 0;
    
    [SerializeField] private TextMeshProUGUI scoreText; 
    private int score = 0;


    
    // Start is called before the first frame update
    void Start()
    {
        // Configure the buttons to be used in the game
        PrepareButtons();
        UpdateScoreText();
    }

    // Update the TextMeshProUGUI text property with the current score
    void UpdateScoreText() {
    scoreText.text = "Score: " + score.ToString();
}

// Restarts the game when the Start button is pressed.
public void StartGame() {
    // Find the Start button in the scene by its name
    GameObject startButton = GameObject.Find("StartButton");
    // If the Start button is found, it disables it to prevent repressing during gameplay
    if (startButton != null) {
        startButton.GetComponent<Button>().interactable = false; 
    }

    sequence.Clear();
    level = 1;
    score = 0;
    counter = 0;
    playerTurn = false;
    UpdateScoreText();
    AddToSequence();  
}






    // Configure the callback functions for the buttons
    void PrepareButtons()
    {
        for (int i=0; i<numButtons; i++) {
            int index = i;
            //Create the copies of the button as a children of the Panel
            GameObject newButton = Instantiate(buttonPrefab, buttonParent);
            newButton.GetComponent<Image>().color = Color.HSVToRGB((float)index/numButtons, 1, 1);
            newButton.GetComponent<SimonButton>().Init(index);
            buttons.Add(newButton.GetComponent<SimonButton>());
            buttons[i].gameObject.GetComponent<Button>().onClick.AddListener(() => ButtonPressed(index));
        }

    }

    // Main function to validate that the button pressed by the user 
    // corresponds with the sequence generated by the CPU
    public void ButtonPressed(int index) {
        if (playerTurn) {
            if (index == sequence[counter++]) {
                // Highlight the button selected by the player
                buttons[index].Highlight();
                if (counter == sequence.Count) {
                    score += 1;
                    UpdateScoreText();
                    // Finish the player turn to ensure no other actions are
                    // taken into account
                    playerTurn = false;
                    level++;
                    counter = 0;
                    AddToSequence();
                    
                }
            } else {
                Debug.Log("Game Over! Final Score: " + score);
            }
        }
    }

    // Add another number to the sequence and display it
    void AddToSequence()
    {
        // Add a new button to the sequence
        sequence.Add(Random.Range(0, buttons.Count));
        StartCoroutine(PlaySequence());
    }

    // Display every button in the sequence so far
    IEnumerator PlaySequence()
    {
        yield return new WaitForSeconds(delay);
        for (int i = 0; i < sequence.Count; i++)  // Use for loop
        {
            int index = sequence[i];
            buttons[index].Highlight();
            yield return new WaitForSeconds(delay);
        }
        playerTurn = true;
    }

    

}